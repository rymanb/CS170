You will be continuing your implementation of the Vector class by adding more
functionality to your existing code. You already have the basic functionality
of a vector, so try to reuse your code when possible and efficient (unless
instructed otherwise). For example, in the operator+= method, you should
simply be calling push_back for each element from the right-hand-side. That
will make operator+= trivial to write. Another example is that operator+ should
be calling operator+= to do a lot of the work. Refer to:
https://faculty.digipen.edu/~dvolper/public/cs170/Classes-2.html#operator_plus_equals
https://faculty.digipen.edu/~dvolper/public/cs170/Classes-2.html#operator_plus_plsuequals_comparison

There are several methods where code reuse will make them very easy to
implement. However, not all methods will use code reuse. For example, look
closely at the output and pay attention to the allocations when implementing
operator=, as you may not have to do as many allocations.

Note:
The goal of these labs are for you to learn how to build structures like lists
and vectors, you can't use anything from the STL (containers, algorithms,
etc.).

1.
Several more methods have been added to the Vector class.
You are given the header file Vector-skeleton.h which includes the 9 new methods as well
as the previous ones. If you've added other private members from the previous
lab, be sure to add them to this file.

Your task is to implement all of the new methods that are declared in the
header file. Here is the list of new methods with brief descriptions:

// Copy constructor
Vector(const Vector& rhs);

// Constructor to create a Vector from an array
Vector(const int array[], unsigned size);

// "Removes" the last element. Does nothing if empty.
void pop_back();

// Removes the first element, shifts the remaining elements to the left.
// Does nothing if empty.
void pop_front();

// Inserts a new element at the specified position. Causes an
// abort() if the position is invalid. (Calls check_bounds)
void insert(int value, unsigned position);

// Removes an element with the specified value (first occurrence only).
void remove(int value);

// Copy assignment operator
Vector& operator=(const Vector& rhs);

// Concatenates a vector onto the end of this vector.
Vector& operator+=(const Vector& rhs);

// Concatenates two Vectors
Vector operator+(const Vector& rhs) const;


2.
Suggested order of implementating (from simpler to harder):
1  pop_back
2  operator+=
3  operator+
4  Vector(const int *array, unsigned size)
5  Vector(const Vector& rhs)
6  operator=
7  pop_front
8  remove
9  insert

Notes:
-) The pop_back method doesn't really remove anything. (It just decrements the
   size.) The value that was (removed) stays in memory, but should not be
   accessed (it is a ghost now)
-) The last 3 functions may require you to shift elements (see diagrams below)
-) Make sure you check for self-assignment in operator=.
-) Be sure to validate the position in insert. (You should be calling check_bounds.)
-) Pay attention to the number of allocations. This will guide your implementation (i.e. code reuse).
-) Make sure you handle the cases when the vector is empty (e.g. don't blindly decrement size_ in pop_back if the vector is empty.)

Study the diagrams before starting this lab:

Example 1: Removing an element from a vector: 
Assume this call: 
  remove(5); // Removes first occurrence of the number 5

Original array: (size is 7, capacity is 8)
+---+---+---+---+---+---+---+---+
| 4 | 1 | 3 | 5 | 2 | 5 | 1 |   |
+---+---+---+---+---+---+---+---+
element 5 (after 3) should be removed, element 5 (after 2) should stay.

Logic: starting from index 0, go right will you find the first occurrence of 5:
+---+---+---+---+---+---+---+---+
| 4 | 1 | 3 | 5 | 2 | 5 | 1 |   |
+---+---+---+---+---+---+---+---+
              ^ 
              |  first occurrence
now shift all element right of this position 1 position to the left
+---+---+---+---+---+---+---+---+
| 4 | 1 | 3 | 2 | 2 | 5 | 1 |   | // copy 2 left, 
+---+---+---+---+---+---+---+---+
              ^ 
                  
+---+---+---+---+---+---+---+---+
| 4 | 1 | 3 | 2 | 5 | 5 | 1 |   | // copy 5 left, 
+---+---+---+---+---+---+---+---+
                  ^ 
                  
+---+---+---+---+---+---+---+---+
| 4 | 1 | 3 | 2 | 5 | 1 | 1 |   | // copy 5 left, 
+---+---+---+---+---+---+---+---+
                      ^ 
done. size = size -1
so size is 6 now

Notice that 1 at index 5 is the last element (last index = size -1 ). 
1 to the right of it is not actual data, it is a ghost and should never be accessed.

Example 2: Inserting into a vector.
Assume this call: 
  Insert(9, 2); // Insert the value 7 at position 2

You must make sure that there is enough room in the array for one additional
element. If the array is full, you must grow it first (like in push_pack)
Assume that there is enough space:

Original array: (size is 7, capacity is 8)
+---+---+---+---+---+---+---+---+
| 4 | 1 | 3 | 2 | 7 | 5 | 1 |   | 
+---+---+---+---+---+---+---+---+
          ^ 
          | insertion point
For each element to the right of the insertion point, shift (copy) it over one
slot to the right (working RIGHT TO LEFT).
+---+---+---+---+---+---+---+---+
| 4 | 1 | 3 | 2 | 7 | 5 | 1 | 1 | copy 1
+---+---+---+---+---+---+---+---+
+---+---+---+---+---+---+---+---+
| 4 | 1 | 3 | 2 | 7 | 5 | 5 | 1 | copy 5
+---+---+---+---+---+---+---+---+
+---+---+---+---+---+---+---+---+
| 4 | 1 | 3 | 2 | 7 | 7 | 5 | 1 | copy 7
+---+---+---+---+---+---+---+---+
+---+---+---+---+---+---+---+---+
| 4 | 1 | 3 | 2 | 2 | 7 | 5 | 1 | copy 2
+---+---+---+---+---+---+---+---+
+---+---+---+---+---+---+---+---+
| 4 | 1 | 3 | 3 | 2 | 7 | 5 | 1 | copy 3
+---+---+---+---+---+---+---+---+
          ^
          | insertion point
Finally once the 3 (position 2) was copied, it can be overwritten with the new value:
+---+---+---+---+---+---+---+---+
| 4 | 1 | 9 | 3 | 2 | 7 | 5 | 1 | 
+---+---+---+---+---+---+---+---+
          ^
          | new value
