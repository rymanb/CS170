In this lab, you will be creating a Vector class, similar to the one in the
Standard Template Library. You won't be providing any iterator classes, as that
is beyond the scope of CS170. 

1.
You are given the header file Vector-skeleton.h to start with, and a partial
implementation in Vector-skeleton.cpp to help get you started. There are 11
public methods so far, and 9 of them are very simple 1-liners. 
(some of them already implemented) 
1. Default constructor     - implemented
2. Destructor
3. clear
4. operator[] (non-const)
5. operator[] (const)
6. empty                   - implemented
7. size                    - implemented
8. capacity                - implemented
9. allocations             - implemented

The remaining 2 public methods are a little more involved:
  push_front - You need to shift all elements over one position. If the array
               is full, you must grow it first.
  push_back - No shifting, but if the array is full, you will need to grow the
              array first.      

Your task is to implement all of the methods that are defined in the header
file. There are some private fields already defined, and you shouldn't need any
others. There are also some simple methods already implemented.

Start with the push_back method and try to pass the first test. Once you get
push_back working, the rest will come pretty quickly.

Probably, the most difficult method at this point is the private grow method.
push_back calls this method, so you will need to implement it to get push_back
to work.

Growing a vector/array simply means allocating another array that is twice the
size of the original array, copying the elements from the orginal array into
the new array, and then deleting the original array.

The subscript operators should call check_bounds before returning the item. The
reason you aren't checking in the subscript operator is code-reuse. There will
be several other places you'll need to check the bounds and you don't want to
duplicate this code every where. This is especially important when we change
the behavior of the check_bounds function: You don't want to change it in
mulitple places.

+-----------------+
|Growing a vector:|
+-----------------+

Let's say current capacity is 4 and all positions are occupied, i.e. size is
also 4:
+---+---+---+---+
| 4 | 1 | 3 | 7 |
+---+---+---+---+
client calls either push_back or push_front, so you need to grow. 
First allocate another array of double capacity (capacity=8 now):
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+
Copy existing elements from original array into new array using a loop of some
 kind. Do not use memcpy for this assignment.
+---+---+---+---+---+---+---+---+
| 4 | 1 | 3 | 7 |   |   |   |   |
+---+---+---+---+---+---+---+---+
Don't forget to free the memory from the original array or you'll have a memory
  leak. Make sure that pointer inside your class is properly assigned.


+---------------------+
|push_front(2) details|
+---------------------+
Assume size=4, capacity=8
+---+---+---+---+---+---+---+---+
| 4 | 1 | 3 | 7 |   |   |   |   |
+---+---+---+---+---+---+---+---+
before you can write 2 into the left-most position, that position 
must be freed by shifting all element 1 position to the right.
Make sure to first move 7, then 3,1,4 in this order:
+---+---+---+---+---+---+---+---+
|   | 4 | 1 | 3 | 7 |   |   |   |
+---+---+---+---+---+---+---+---+
now you can write 2 ( array_[0]=2; )
+---+---+---+---+---+---+---+---+
| 2 | 4 | 1 | 3 | 7 |   |   |   |
+---+---+---+---+---+---+---+---+
++size - so we know how many "legal" positions in the array.
